<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!--  Authentication  -->
    <bean id="authenticationEntryPoint" class="com.perfect.community.api.security.CustomAuthenticationEntryPoint"/>
    <bean id="accessDeniedHandler" class="com.perfect.community.api.security.CustomAccessDeniedHandler"/>

    <!--  Login Handler  -->
    <bean id="loginSuccessHandler" class="com.perfect.community.api.security.login.LoginSuccessHandler"/>
    <bean id="loginFailureHandler" class="com.perfect.community.api.security.login.LoginFailureHandler"/>

    <!--  Logout Handler  -->
    <bean id="logoutSuccessHandler" class="com.perfect.community.api.security.logout.CustomLogoutSuccessHandler"/>

    <!--  Customize UserDetailService  -->
    <bean id="customUserDetailService" class="com.perfect.community.api.security.detail.CustomUserDetailService"/>

    <!--  BCryptPasswordEncoder  -->
    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--  ObjectMapper for JSON  -->
    <bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper"/>

    <!--  Customize AuthenticationManager  -->
    <bean id="customAuthenticationManager"
          class="com.perfect.community.api.security.filter.CustomAuthenticationManager">
    </bean>

    <!--  Customize UsernamePasswordAuthenticationFilter for JSON  -->
    <bean id="jsonUsernamePasswordAuthenticationFilter"
          class="com.perfect.community.api.security.filter.JsonUsernamePasswordAuthenticationFilter">
        <constructor-arg name="authenticationManager" ref="customAuthenticationManager"/>
        <constructor-arg name="objectMapper" ref="objectMapper"/>
        <constructor-arg name="authenticationSuccessHandler" ref="loginSuccessHandler"/>
        <constructor-arg name="authenticationFailureHandler" ref="loginFailureHandler"/>
    </bean>

    <!--    <bean id="filterExceptionHandler" class="com.perfect.community.api.security.filter.FilterExceptionHandler" />-->


    <!--    <security:client-registrations>-->
    <!--        <security:client-registration registration-id="google"-->
    <!--                                      client-id="701605057235-h15lm743tsj3pmgl05pa53mtgpk3jb2l.apps.googleusercontent.com"-->
    <!--                                      client-secret="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"-->
    <!--                                      provider-id="google"-->
    <!--                                      scope="profile,email"-->
    <!--                                      client-name="client-registration"/>-->
    <!--    </security:client-registrations>-->

    <!--    <bean id="authorizedClientRepository" class="org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository">-->
    <!--        <constructor-arg ref="authorizedClientService"/>-->
    <!--    </bean>-->
    <!--    <bean id="clientRegistrationRepository" class="org.springframework.security.oauth2.client.registration.ClientRegistrationRepository"></bean>-->
    <!--    <bean id="authorizedClientService" class="org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService">-->
    <!--        <constructor-arg ref="clientRegistrationRepository"/>-->
    <!--    </bean>-->


    <!--    <bean id="auth2AuthorizedClientManager" class="org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager">-->
    <!--        <constructor-arg index="0" ref=""/>-->
    <!--        <constructor-arg index="1" ref=""/>-->
    <!--    </bean>-->
    <security:http auto-config="false" use-expressions="true"
                   authentication-manager-ref="customAuthenticationManager"
                   entry-point-ref="authenticationEntryPoint">
        <!--    <security:http auto-config="true" use-expressions="true" authentication-manager-ref="CustomAuthenticationManager" >-->
        <security:csrf disabled="true"/>

        <security:intercept-url method="GET" pattern="/login" access="isAnonymous()"/>
        <security:intercept-url method="POST" pattern="/api/user" access="isAnonymous()"/>
        <security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>

        <security:access-denied-handler ref="accessDeniedHandler"/>

        <!--                <security:form-login login-page="/login" login-processing-url="/login"-->
        <!--                                     authentication-success-handler-ref="loginSuccessHandler"-->
        <!--                                     authentication-failure-handler-ref="loginFailureHandler"/>-->
        <security:custom-filter ref="jsonUsernamePasswordAuthenticationFilter" before="FORM_LOGIN_FILTER"/>


        <security:session-management session-authentication-error-url="/error">
            <security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>
        </security:session-management>

        <security:logout success-handler-ref="logoutSuccessHandler" invalidate-session="false"/>
        <!--        <security:logout logout-success-url="/" invalidate-session="true" delete-cookies="JSESSIONID,remember-me" />-->

        <security:remember-me key="PerfectCommunity-Spring-Security-Remember-Me-By-Ahngbeom"
                              token-validity-seconds="604800"
                              authentication-success-handler-ref="loginSuccessHandler"
                              user-service-ref="customUserDetailService"
                              remember-me-parameter="remember-me"/>

        <!--        <security:oauth2-login login-processing-url="/login/oauth2/code/google" />-->

    </security:http>

    <security:authentication-manager>
        <!--        <security:authentication-provider>-->
        <security:authentication-provider user-service-ref="customUserDetailService">
            <!--            <security:user-service>-->
            <!--                <security:user name="member" password="{noop}member" authorities="ROLE_MEMBER" />-->
            <!--                <security:user name="admin" password="{noop}1234" authorities="ROLE_MEMBER, ROLE_ADMIN" />-->
            <!--            </security:user-service>-->

            <!--            <security:jdbc-user-service-->
            <!--                data-source-ref="dataSource" users-by-username-query=" select userid, password, enabled from users where userid = ?"-->
            <!--                authorities-by-username-query="select username, authority from authorities where username = ?"-->
            <!--            />-->

            <!--            <security:password-encoder ref="customPasswordEncoder" />-->
            <security:password-encoder ref="bCryptPasswordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>


</beans>